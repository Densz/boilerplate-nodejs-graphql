version: '3'
services:
  postgres:
    image: 'postgres:10'
    restart: always
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=boilerplate
    volumes:
      - ./postgres-data/postgres:/var/lib/postgresql/data
    ports:
      - '5432:5432'

  # redis-server:
  #   image: 'redis:latest'
  #   ports:
  #     - '6379:6379'

  node-app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '8888:8888'
    volumes:
      - /usr/app/node_modules
      - .:/usr/app
    environment:
      - NODE_ENV=development
      - POSTGRES_PASSWORD=root
    restart: always
    depends_on:
      - postgres
    command: ./wait-for.sh postgres -- npm run dev

  postgres-test:
    image: 'postgres:10'
    restart: always
    environment:
      - POSTGRES_DB=mytestdatabase
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
    ports:
      - '5431:5432'

  node-app-test:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '8881:8888'
    volumes:
      - /usr/app/node_modules
      - .:/usr/app
    environment:
      - NODE_ENV=development
      - TEST_DATABASE=mytestdatabase
      - POSTGRES_PASSWORD=root
    restart: always
    depends_on:
      - postgres-test
    command: ./wait-for.test.sh postgres-test -- npm run test-server
### COMMAND HELPERS
## When there is a new package in the package.json
# docker-compose up --build
# docker-compose ps
## Launch in background
# docker-compose up -d
## Kill docker compose services
# docker-compose down
